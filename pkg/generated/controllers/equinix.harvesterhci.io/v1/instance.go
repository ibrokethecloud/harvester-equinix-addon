/*
Copyright 2022 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/harvester/harvester-equinix-addon/pkg/apis/equinix.harvesterhci.io/v1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type InstanceHandler func(string, *v1.Instance) (*v1.Instance, error)

type InstanceController interface {
	generic.ControllerMeta
	InstanceClient

	OnChange(ctx context.Context, name string, sync InstanceHandler)
	OnRemove(ctx context.Context, name string, sync InstanceHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() InstanceCache
}

type InstanceClient interface {
	Create(*v1.Instance) (*v1.Instance, error)
	Update(*v1.Instance) (*v1.Instance, error)
	UpdateStatus(*v1.Instance) (*v1.Instance, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Instance, error)
	List(opts metav1.ListOptions) (*v1.InstanceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Instance, err error)
}

type InstanceCache interface {
	Get(name string) (*v1.Instance, error)
	List(selector labels.Selector) ([]*v1.Instance, error)

	AddIndexer(indexName string, indexer InstanceIndexer)
	GetByIndex(indexName, key string) ([]*v1.Instance, error)
}

type InstanceIndexer func(obj *v1.Instance) ([]string, error)

type instanceController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewInstanceController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) InstanceController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &instanceController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromInstanceHandlerToHandler(sync InstanceHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Instance
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Instance))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *instanceController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Instance))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateInstanceDeepCopyOnChange(client InstanceClient, obj *v1.Instance, handler func(obj *v1.Instance) (*v1.Instance, error)) (*v1.Instance, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *instanceController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *instanceController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *instanceController) OnChange(ctx context.Context, name string, sync InstanceHandler) {
	c.AddGenericHandler(ctx, name, FromInstanceHandlerToHandler(sync))
}

func (c *instanceController) OnRemove(ctx context.Context, name string, sync InstanceHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromInstanceHandlerToHandler(sync)))
}

func (c *instanceController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *instanceController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *instanceController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *instanceController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *instanceController) Cache() InstanceCache {
	return &instanceCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *instanceController) Create(obj *v1.Instance) (*v1.Instance, error) {
	result := &v1.Instance{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *instanceController) Update(obj *v1.Instance) (*v1.Instance, error) {
	result := &v1.Instance{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *instanceController) UpdateStatus(obj *v1.Instance) (*v1.Instance, error) {
	result := &v1.Instance{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *instanceController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *instanceController) Get(name string, options metav1.GetOptions) (*v1.Instance, error) {
	result := &v1.Instance{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *instanceController) List(opts metav1.ListOptions) (*v1.InstanceList, error) {
	result := &v1.InstanceList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *instanceController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *instanceController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1.Instance, error) {
	result := &v1.Instance{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type instanceCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *instanceCache) Get(name string) (*v1.Instance, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1.Instance), nil
}

func (c *instanceCache) List(selector labels.Selector) (ret []*v1.Instance, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Instance))
	})

	return ret, err
}

func (c *instanceCache) AddIndexer(indexName string, indexer InstanceIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Instance))
		},
	}))
}

func (c *instanceCache) GetByIndex(indexName, key string) (result []*v1.Instance, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1.Instance, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1.Instance))
	}
	return result, nil
}

type InstanceStatusHandler func(obj *v1.Instance, status v1.InstanceStatus) (v1.InstanceStatus, error)

type InstanceGeneratingHandler func(obj *v1.Instance, status v1.InstanceStatus) ([]runtime.Object, v1.InstanceStatus, error)

func RegisterInstanceStatusHandler(ctx context.Context, controller InstanceController, condition condition.Cond, name string, handler InstanceStatusHandler) {
	statusHandler := &instanceStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromInstanceHandlerToHandler(statusHandler.sync))
}

func RegisterInstanceGeneratingHandler(ctx context.Context, controller InstanceController, apply apply.Apply,
	condition condition.Cond, name string, handler InstanceGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &instanceGeneratingHandler{
		InstanceGeneratingHandler: handler,
		apply:                     apply,
		name:                      name,
		gvk:                       controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterInstanceStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type instanceStatusHandler struct {
	client    InstanceClient
	condition condition.Cond
	handler   InstanceStatusHandler
}

func (a *instanceStatusHandler) sync(key string, obj *v1.Instance) (*v1.Instance, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type instanceGeneratingHandler struct {
	InstanceGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *instanceGeneratingHandler) Remove(key string, obj *v1.Instance) (*v1.Instance, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.Instance{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *instanceGeneratingHandler) Handle(obj *v1.Instance, status v1.InstanceStatus) (v1.InstanceStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.InstanceGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
